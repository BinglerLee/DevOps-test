name: chocolatine
run-name: chocolatine

on:
  push:
    branches-ignore:
      - "ga-ignore-*"
  pull_request:
    branches-ignore:
      - "ga-ignore-*"

env:
    MIRROR_URL: "git@github.com:EpitechPromo2027/B-DOP-200-LYN-2-1-chocolatine-lee.bingler.git"
    EXECUTABLES: "antman,giantman"

jobs:
    check_coding_style:
        runs-on: ubuntu-latest
        container: ghcr.io/epitech/coding-style-checker:latest
        steps:

        - name: make the checkout of the repo
          uses: actions/checkout@v3

        - name: run the coding style
          run: |
            check.sh $(pwd) $(pwd)
            echo $SHELL 
            cat ~/*.rc
            alias

        - name: check is theres an coding style error
          run: |
            if [ ! -f 'coding-style-reports.log' ]; then
              exit 0
            elif [ $(wc -c 'coding-style-reports.log' | awk '{print $1}') == "0" ]; then
              exit 0
            fi
            exit 1

        - name: display_error
          if: ${{ failure() }}
          run: |
            IFS=':'
            while read -r line; do
              read -a strarr <<< "$line"
              strarr[0]=$(echo "${strarr[0]}" | sed -r 's/^.{2}//')
              strarr[2]=$(echo "${strarr[2]}" | sed -r 's/^.{1}//')
              echo "::error file=${strarr[0]},line=${strarr[1]},endLine=$((${strarr[1]} + 1)),col=0,title="${strarr[2]} coding style error"::${strarr[3]}"
            done < 'coding-style-reports.log'

    check_program_compilation:
        needs: check_coding_style
        runs-on: ubuntu-latest
        container: epitechcontent/epitest-docker:latest

        steps:
        - name: make the checkout of the repo
          uses: actions/checkout@v3

        - name: compute program
          run: make
          timeout-minutes: 2
        
        - name: make the clean rule
          run: make clean

        - name: check_exec_list_exist
          run: |
              IFS=',' read -r -a array << $EXECUTABLES
              for i in "${array[@]}"
              do
                  if [ ! -x $"i" ]; then
                      echo "::error::Binarie $i does not exist.\n"
                      exit 1
                  fi
              done

    run_test:
        needs: check_program_compilation
        runs-on: ubuntu-latest
        container: epitechcontent/epitest-docker:latest

        steps:
        - name: make the checkout of the repo
          uses: actions/checkout@v3

        - name: make the tests_run rule
          run: make tests_run
          timeout-minutes: 2

    push_to_mirror:
        if: ${{ github.event_name == 'push' }}
        needs: run_test
        runs-on: ubuntu-latest

        steps:
        - name: make the checkout of the repo
          uses: actions/checkout@v3
          with: 
            fetch-depth: 0

        - name: mirroring the repo
          uses: pixta-dev/repository-mirroring-action@v1
          with:
            target_repo_url:
              ${{ env.MIRROR_URL }}
            ssh_private_key:
                ${{ secrets.GIT_SSH_PRIVATE_KEY }}
